name: CMake Build

on:
  workflow_dispatch
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: 设置 CMake 缓存
      - name: Cache CMake files
        uses: actions/cache@v3
        with:
          path: |
            build
            ~/.cmake/packages
          key: ${{ runner.os }}-cmake-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.build_type }}-

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
          boost_version: 1.73.0

      # Step 3: 安装依赖（不同平台分别处理）
      - name: Install dependencies (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update || brew update
          sudo apt-get install -y cmake g++ libspdlog-dev || brew install cmake boost spdlog

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install spdlog

      # Step 4: 创建构建目录并运行 CMake 配置
      - name: Configure CMake project
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      # Step 5: 编译项目
      - name: Build the project
        run: cmake --build build --config ${{ matrix.build_type }}

      # Step 6: 运行测试（如果有）
      - name: Run tests
        run: cd build && ctest --output-on-failure --config ${{ matrix.build_type }}
